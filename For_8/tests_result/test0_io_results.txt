}
0; return
    unlink(PIPE2);
    unlink(PIPE1);

    close(file_output);
    buf); printf("%s",
    strlen(buf)); buf, write(file_output,
    O_WRONLY); | O_CREAT open(argv[2], = file_output int

    2); - BUF_SIZE buf, read(pipe,
    {0}; = buf[BUF_SIZE] char
    O_RDONLY); open(PIPE2, = pipe int
    block logic third //

    read_from_file(argv[1]);
    block logic first  //

    0); 0666, | S_IFIFO mknod(PIPE2,
    0); 0666, | S_IFIFO mknod(PIPE1,
    umask(0); (void)

    }
    exit(-1);
        parameters!\n"); line command of count printf("Incorrect
        { 3) != (argc if
    { **argv) char argc, main(int int

}
BUF_SIZE); buf, write(pipe,
    O_WRONLY); open(PIPE1, = pipe int
    close(fd);

    '\0'; = buf[end_of_string]
    }
    exit(-1);
        { -1) == 2)) - BUF_SIZE buf, read(fd, = ((end_of_string if
    end_of_string; size_t
    {0}; = buf[BUF_SIZE] char

    }
    exit(-1);
        { -1) == O_RDONLY)) open(filename, = ((fd if
    fd; int
    { *filename) char read_from_file(const void

"/home/vlad/OS/IHW1/pipe2_1.fifo" PIPE2 #define
"/home/vlad/OS/IHW1/pipe1_2.fifo" PIPE1 #define
5002 BUF_SIZE #define

<unistd.h> #include
<stdlib.h> #include
<sys/stat.h> #include
<string.h> #include
<stdio.h> #include
<fcntl.h> #include